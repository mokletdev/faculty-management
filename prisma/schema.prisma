// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum UserRole {
    ADMIN
    DOSEN
}

enum Priority {
    LOW
    MEDIUM
    HIGH
}

enum NotificationType {
    CREATED
    UPDATED
    CANCELLED
}

enum SyncStatus {
    PENDING
    SYNCED
    FAILED
    AUTH_ERROR
    RATE_LIMITED
    DELETE_FAILED
    DELETED
    GROUP_INVITE_PENDING
    GROUP_INVITE_SENT
    GROUP_INVITE_FAILED
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(uuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]

    role           UserRole       @default(DOSEN)
    createdAgendas Agenda[]       @relation("CreatedBy")
    agendaAccesses AgendaAccess[] @relation("AgendaAccess")
    notifications  Notification[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Room {
    id        String   @id @default(uuid())
    name      String
    location  String?
    agendas   Agenda[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Agenda {
    id              String     @id @default(uuid())
    title           String
    description     String?
    startTime       DateTime
    endTime         DateTime
    priority        Priority
    roomId          String
    room            Room       @relation(fields: [roomId], references: [id])
    createdById     String
    createdBy       User       @relation("CreatedBy", fields: [createdById], references: [id])
    googleEventId   String?
    syncStatus      SyncStatus @default(PENDING)
    syncError       String?
    lastSyncAttempt DateTime?
    createdAt       DateTime   @default(now())
    updatedAt       DateTime   @updatedAt
    accessMahasiswa Boolean    @default(false) // true = Mahasiswa can see it
    accessAllDosen  Boolean    @default(false) // true = All dosen can see it

    accessDosen   AgendaAccess[]
    notifications Notification[] // Access to several dosens

    @@unique([startTime, endTime, roomId], name: "no_time_conflict")
    @@index([startTime, endTime, roomId])
    @@index([syncStatus, lastSyncAttempt])
}

model AgendaAccess {
    id       String @id @default(uuid())
    agendaId String
    userId   String
    agenda   Agenda @relation(fields: [agendaId], references: [id])
    user     User   @relation("AgendaAccess", fields: [userId], references: [id])

    @@unique([agendaId, userId])
}

model Notification {
    id        String           @id @default(cuid())
    type      NotificationType
    message   String
    isRead    Boolean          @default(false)
    userId    String
    agendaId  String?
    createdAt DateTime         @default(now())

    user   User    @relation(fields: [userId], references: [id])
    agenda Agenda? @relation(fields: [agendaId], references: [id])
}

model SyncLog {
    id        String   @id @default(cuid())
    agendaId  String
    operation String
    status    String
    message   String?
    timestamp DateTime @default(now())

    @@index([agendaId])
    @@index([timestamp])
}

model GoogleCalendarShareable {
    calendarId String @id
}

model GoogleGroupShareable {
    groupEmail  String  @id
    groupName   String?
    description String?
}
